## ****************************************************************************
## ****************************************************************************
## Copyright SoC Design Research Group, All rights reserved.    
## Electronics and Telecommunications Research Institute (ETRI)
##
## THESE DOCUMENTS CONTAIN CONFIDENTIAL INFORMATION AND KNOWLEDGE 
## WHICH IS THE PROPERTY OF ETRI. NO PART OF THIS PUBLICATION IS 
## TO BE USED FOR ANY OTHER PURPOSE, AND THESE ARE NOT TO BE 
## REPRODUCED, COPIED, DISCLOSED, TRANSMITTED, STORED IN A RETRIEVAL 
## SYSTEM OR TRANSLATED INTO ANY OTHER HUMAN OR COMPUTER LANGUAGE, 
## IN ANY FORM, BY ANY MEANS, IN WHOLE OR IN PART, WITHOUT THE 
## COMPLETE PRIOR WRITTEN PERMISSION OF ETRI.
## ****************************************************************************
## 2022-10-31
## Kyuseung Han (han@etri.re.kr)
## ****************************************************************************
## ****************************************************************************

# HOW TO USE
# 1. verify ref C code
# 2. check
# 	if header file name and array name are equal
# 	if size_of_{array_name} is defined
# 3. copy C header file into ./target
# 4. write ROM_NAME and ROM_WIDTH in each_rom.mh
# 5. make all
# 6. insert rom IP into arch xml file
# 7. modify C header to use the generated files

ifdef RVX_MINI_HOME
	include ${RVX_MINI_HOME}/rvx_config.mh
else
	include ${RVX_DEVKIT_HOME}/rvx_config.mh
endif

TEMPLATE_FILE = ${RVX_ENV}/util/Makefile.rom.template
include ${RVX_UTIL_HOME}/template_makefile.mh

PLATFORM_DIR = $(call absolute_path,${CURDIR}/../..)
PLATFORM_NAME = $(notdir ${PLATFORM_DIR})

USER_DIR = ${PLATFORM_DIR}/user

include ./each_rom.mh

ifndef ROM_NAME
$(error define ROM_NAME in each_rom.mh)
endif

ifndef ROM_TYPE
ROM_TYPE=rtl
endif

ifndef AXI_WIDTH
$(error define AXI_WIDTH in each_rom.mh)
endif

ifndef CELL_WIDTH
CELL_WIDTH=${AXI_WIDTH}
endif

ROM_SRC = $(wildcard ${CURDIR}/target/*.c)
ROM_OBJ = $(ROM_SRC:.c=.o)

ifndef INPUT_FILE
	INPUT_FILE=${CURDIR}/target
endif

ifndef OUTPUT_DIR
	OUTPUT_DIR=${CURDIR}
endif

ORIGINAL_FILE_LIST=./Makefile .gitignore each_rom.mh ${ROM_NAME}.xml target
include ${RVX_UTIL_HOME}/distclean.mh

-include ${PLATFORM_DIR}/arch/ssw/env/set_env.mh
-include ${PLATFORM_DIR}/arch/ssw/env/set_memory.mh

check:
	@echo ${PLATFORM_DIR}
	@echo ${ROM_OBJ}

all: gen_rom install

build: ${ROM_OBJ}

$(ROM_OBJ):%.o: %.c
	gcc ${INCLUDES} -D GENERATE_HEX_USING_GCC -c $<

gen_rom: build
	@cd ${RVX_SYNTHESIZER_HOME} && make gen_rom ROM_NAME=${ROM_NAME} ROM_TYPE=${ROM_TYPE} AXI_WIDTH=${AXI_WIDTH} CELL_WIDTH=${CELL_WIDTH} INPUT_FILE=${INPUT_FILE} OUTPUT_DIR=${OUTPUT_DIR}

__gen_each_rom:
	@gcc ${INCLUDES} -I./target -D GENERATE_HEX_USING_GCC ${GENERATE_FILE_STEM}.c ${ARRAY_NAME}.o -o ${GENERATE_FILE_STEM}
	@./${GENERATE_FILE_STEM}

uninstall:
	-@rm -f ${USER_DIR}/sim/src/${ROM_NAME}_cell_sim.v 
	-@rm -f ${USER_DIR}/fpga/common/src/${ROM_NAME}_cell_fpga.v
	-@rm -f ${USER_DIR}/rtl/src/${ROM_NAME}_cell_rtl.v
	-@rm -f ${USER_DIR}/rtl/src/${ROM_NAME}*.v
	-@rm -f ${USER_DIR}/rtl/include/${ROM_NAME}*.v?
	-@rm -f ${USER_DIR}/fpga/common/${ROM_NAME}*.coe
	-@rm -f ${USER_DIR}/fpga/common/xci/generate*${ROM_NAME}.tcl
	-@rm -f ${USER_DIR}/api/${ROM_NAME}_memorymap.h

install: uninstall
	-@mv -f ./${ROM_NAME}_cell_sim.v ${USER_DIR}/sim/src
	-@mv -f ./${ROM_NAME}_cell_rtl.v ${USER_DIR}/rtl/src
	-@mv -f ./${ROM_NAME}_cell_fpga.v ${USER_DIR}/fpga/common/src
	@mv ./${ROM_NAME}*.v ${USER_DIR}/rtl/src
	@mv ./${ROM_NAME}*.v? ${USER_DIR}/rtl/include
	@mv ./${ROM_NAME}_memorymap.h ${USER_DIR}/api
	@mv ./${ROM_NAME}*.coe ${USER_DIR}/fpga/common
	@mv ./generate*${ROM_NAME}.tcl ${USER_DIR}/fpga/common/xci

clean: distclean

.PHONY:
